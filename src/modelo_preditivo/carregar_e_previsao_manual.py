# -*- coding: utf-8 -*-
"""treinamento_de_modelos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16_jUoxFVWcmIbUT1LsALqRCY5kWAqK_F

üì° Previs√£o com dados da API usando modelo treinado

Neste trecho, os valores que podem vir de uma API s√£o armazenados em vari√°veis simples (data_api, cota_api e chuva_api), facilitando a substitui√ß√£o direta por dados reais da API sem necessidade de convers√£o adicional. Em seguida, esses valores s√£o organizados em um DataFrame, que √© a estrutura esperada pelo modelo para fazer a previs√£o, o modelo e o scaler, previamente treinados e salvos, s√£o carregados com joblib. O scaler √© aplicado ao novo dado para normalizar as vari√°veis conforme o treinamento. Por fim, a previs√£o √© feita pelo modelo, e o resultado num√©rico √© convertido de volta para o valor categ√≥rico original com LabelEncoder.

Este fluxo permite receber dados diretamente da API, aplicar o modelo treinado e obter uma previs√£o interpret√°vel de forma simples e organizada.
"""

# --- Importa√ß√µes necess√°rias ---
import pandas as pd
import joblib

# --- Valores que podem vir da API ---
data_api = 106
cota_api = 500
chuva_api = 14

# --- Criando DataFrame com vari√°veis simples, f√°cil de substituir por dados da API ---
novo_dado = pd.DataFrame({
    'Data': [data_api],
    'Cota': [cota_api],
    'Chuva': [chuva_api]
})

# --- Carregando modelo, scaler e label encoder salvos ---
nome_arquivo = 'modelos_salvos/GradBoost200.pkl'
dados = joblib.load(nome_arquivo)

modelo = dados['modelo']
scaler = dados['scaler']
le = dados['label_encoder']  # <--- Aqui est√° o carregamento do LabelEncoder

# --- Aplicando o scaler ao novo dado ---
novo_dado_scaled = scaler.transform(novo_dado)

# --- Fazendo a previs√£o ---
previsao = modelo.predict(novo_dado_scaled)

# --- Convertendo o resultado para a categoria original (texto) ---
previsao_texto = le.inverse_transform(previsao)

# --- Exibindo o resultado ---
print(f"Previs√£o: {previsao_texto[0]}")